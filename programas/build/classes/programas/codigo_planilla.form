<?xml version="1.0" encoding="UTF-8" ?>

<Form version="1.8" maxVersion="1.9" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
  <Properties>
    <Property name="defaultCloseOperation" type="int" value="3"/>
  </Properties>
  <SyntheticProperties>
    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
    <SyntheticProperty name="generateCenter" type="boolean" value="false"/>
  </SyntheticProperties>
  <AuxValues>
    <AuxValue name="FormSettings_autoResourcing" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_autoSetComponentName" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_generateFQN" type="java.lang.Boolean" value="true"/>
    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_i18nAutoMode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_layoutCodeTarget" type="java.lang.Integer" value="1"/>
    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
    <AuxValue name="designerSize" type="java.awt.Dimension" value="-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,3,11,0,0,3,89"/>
  </AuxValues>

  <Layout class="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout">
    <Property name="useNullLayout" type="boolean" value="false"/>
  </Layout>
  <SubComponents>
    <Container class="javax.swing.JScrollPane" name="jScrollPane1">
      <AuxValues>
        <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
      </AuxValues>
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout" value="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout$AbsoluteConstraintsDescription">
          <AbsoluteConstraints x="50" y="80" width="780" height="660"/>
        </Constraint>
      </Constraints>

      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
      <SubComponents>
        <Component class="javax.swing.JTextArea" name="jTextArea1">
          <Properties>
            <Property name="editable" type="boolean" value="false"/>
            <Property name="columns" type="int" value="20"/>
            <Property name="rows" type="int" value="5"/>
            <Property name="text" type="java.lang.String" value="/*&#xa;NOMBRE:JOSE ESTANISLAO LOPEZ TUBAC&#xa;0901-17-12&#xa;Este programa realiza los calculos para una planilla con distintos empleados, de diferentes departamentos&#xa; */&#xa;package laboratorio3;&#xa;import java.text.DecimalFormat;&#xa;import java.util.Scanner;&#xa;&#xa;import javax.swing.JOptionPane;&#xa;import static laboratorio3.Laboratorio3.nomb;&#xa;public class Laboratorio3 {&#xa;    //declaracion de variables globales&#xa;    public static String plani[][] = new String[10][11];&#xa;    public static String nomb[] = {&quot;jose&quot; ,&quot;laib  &quot;,&quot; carlos&quot;,&quot;daniel&quot;,&quot;javier&quot;,&quot;brian&quot;,&quot;bryan&quot;,&quot;kike&quot;,&quot;ricardo&quot;,&quot;richi&quot;};&#xa;&#xa;    public static Scanner lector = new Scanner(System.in);&#xa;    public static float dep[] = new float[5]; &#xa;    public static  String ISR[][] = new String[10][3];&#xa;    public static  int intcodemp = 0,intsueldobase = 0,intdescuento,intconversueldo,intbonificacion,intpercepciones,intopcion,intcomision,opcion,intsueldoliquido,intdep = 0;&#xa;    public static float fltigss,fltsueldoliquido,fltsumatoria,fltisr = 0,fltdeducciones;&#xa;    public static double fltvalorigss = 0.0483;&#xa;    public static float fltisr1 = (float) 0.03 , fltisr2 = (float) 0.05, fltisr3 = (float) 0.1;&#xa;    public static  DecimalFormat df = new DecimalFormat(&quot;#.00&quot;);&#xa;    public static String op;&#xa;        &#xa;    //comentarios de prueba 1&#xa;    //comentarios de prueba 2&#xa;    //comentarios de prueba 3&#xa;    public static int codigodep(int j)&#xa;    {&#xa;    //CODIGO RANDOM DE LOS DEPARTAMENTOS    &#xa;    intdep = (int) (1 + (Math.random()*5));                &#xa;    return intdep;&#xa;    }&#xa;    public static int codigoemp(int j)&#xa;    {&#xa;     //CODIGO RANDOM DE LOS EMPLEADOS   &#xa;    intcodemp = (int) (1 + (Math.random()*200));                &#xa;    return intcodemp;&#xa;    }&#xa;    public static void main(String[] args) {&#xa;        &#xa;       do{&#xa;        //LLENADO DE LA MATRIZ CON RANDOM Y OPERACIONES&#xa;            llenadomatriz();&#xa;        //SE MUESTRA LA MATRIZ&#xa;            resultados();&#xa;        //SE OPERAN Y MUESTRAN RESULTADOS POR DEPARTAMENTOS&#xa;            totaldep();&#xa;        //SE OPERAN Y MUESTRAN RESULTADOS DE IGSS POR &#xa;            isremp();&#xa;        //MENU PARA EL CICLO DO-WHILE&#xa;            menuregresar();    &#xa;       }while(opcion!=2);&#xa;    }&#xa;   &#xa;    public static void llenadomatriz()&#xa;    {&#xa;       &#xa;         for(int j = 0;j &lt;10;j++)&#xa;                    {&#xa;                     //lenado de codigos automaticos por medio de procesos&#xa;                    plani[j][0]= Integer.toString(codigodep(intdep));//Llenado de numeros random para el codigo de departamento por medio de un proceso&#xa;                    plani[j][1] = Integer.toString(codigoemp(intcodemp));//Llenado de numeros random para el codigo de empleado&#xa;                    plani[j][2] = nomb[(int)((Math.random()*9))];//Llenado de nombres random &#xa;                    intsueldobase = (int) (2500 + (Math.random()*10000)); //Llenados de numero&#xa;                    plani[j][3] = Integer.toString(intsueldobase);&#xa;                    intbonificacion = (int)((Math.random()*500)+1);&#xa;                    plani[j][4] = Integer.toString(intbonificacion);&#xa;                    intcomision = (int)((Math.random()*500)+ 1);&#xa;                    plani[j][5] = Integer.toString(intcomision);&#xa;                    //introduccion de la resp&#xfa;esta en la variable para ver si calcular el igss&#xa;                    op = JOptionPane.showInputDialog(null,&quot;PLANILLA DE SALARIOS\u005cnEL EMPLEADO No.&quot;+(j+1)+&quot; PAGA IGSS?\u005cn1.SI\u005cn2.NO&quot;);&#xa;                    intopcion = Integer.parseInt(op);&#xa;                    switch(intopcion)&#xa;                    {&#xa;                        case 1:&#xa;                            fltigss = (float) (((intsueldobase + intcomision )*fltvalorigss));        &#xa;                            plani[j][6] = String.valueOf(df.format(fltigss));&#xa;                            plani[j][10] = &quot;SI&quot;;&#xa;                            break;&#xa;                        case 2:&#xa;                            fltigss = 0;                &#xa;                            plani[j][6] = String.valueOf(df.format(fltigss));&#xa;                            plani[j][10] = &quot;NO&quot;;&#xa;                            break;&#xa;                 &#xa;                    }&#xa;                    intdescuento = (int)((Math.random()*500)+1);                   &#xa;                    plani[j][7] = Integer.toString(intdescuento);&#xa;                    &#xa;                    if(intsueldobase &gt;=2500 &amp;&amp; intsueldobase &lt;= 5000)&#xa;                    {&#xa;                    fltisr = (float) ((intsueldobase)*fltisr1);&#xa;                    plani[j][8] = String.valueOf(df.format(fltisr));&#xa;                    }else if(intsueldobase &gt;5001 &amp;&amp; intsueldobase &lt;10000)&#xa;                    {&#xa;                     fltisr = (float) ((intsueldobase)*fltisr2); &#xa;                     plani[j][8] = String.valueOf(df.format(fltisr));&#xa;                    }else if(intsueldobase &gt;=10001 )&#xa;                    {&#xa;                     fltisr = (float) ((intsueldobase)*fltisr3); &#xa;                     plani[j][8] = String.valueOf(df.format(fltisr));&#xa;                    }                                     &#xa;                    percepciones();&#xa;                    deducciones();&#xa;                    sueldoliquido();&#xa;                    plani[j][9] = String.valueOf(df.format(fltsueldoliquido));&#xa;                     }&#xa;    }&#xa;    &#xa;    public static void percepciones()&#xa;    {&#xa;        //asignacion de las percepciones a una variable&#xa;     intpercepciones = intsueldobase + intbonificacion +intcomision;   &#xa;    }&#xa;     public static void deducciones()&#xa;    {&#xa;        //asignacion de las deducciones a una variable&#xa;        fltdeducciones = fltigss +intdescuento + fltisr;&#xa;    }&#xa;     public static void sueldoliquido()&#xa;    {&#xa;      fltsueldoliquido = (intpercepciones-fltdeducciones);&#xa;    }&#xa;    public static void resultados()&#xa;    {&#xa;       //IMPRESION DE LA MATRIZ&#xa;      System.out.println(&quot;______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________&quot;);&#xa;      System.out.println(&quot;No.DEPARTAMENTO\u005ct\u005ctCODIGO\u005ct\u005ctNOMBRE     \u005ct\u005ctSUELDO BASE\u005ct\u005ctBONIFICACION\u005ct\u005ctCOMISIONES\u005ct\u005ctIGSS     \u005ct\u005ct\u005ctDESCUENTOS J.\u005ct\u005ctISR\u005ct\u005ctSUELDO LIQUIDO\u005ct\u005ctPAGA IGSS&quot;);&#xa;      for(int i = 0; i &lt;10;i++)&#xa;      {    &#xa;       System.out.println(&quot;\u005ct&quot;+plani[i][0]+&quot;\u005ct\u005ct&quot;+ plani[i][1]+&quot;\u005ct\u005ct&quot;+plani[i][2]+&quot;       \u005ct\u005ctQ.&quot;+plani[i][3]+&quot;\u005ct\u005ct\u005ctQ.&quot;&#xa;               + &quot;&quot;+plani[i][4]+&quot;\u005ct\u005ct\u005ctQ.&quot;+plani[i][5]+&quot;\u005ct\u005ct\u005ctQ.&quot;+plani[i][6]+&quot;     \u005ct\u005ct\u005ctQ.&quot;+plani[i][7]+&quot;\u005ct\u005ct\u005ctQ.&quot;+plani[i][8]+&quot;  \u005ct\u005ctQ.&quot;+plani[i][9]+&quot;\u005ct\u005ct&quot;+plani[i][10]);&#xa;       System.out.println(&quot;______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________&quot;);&#xa;      }     &#xa;    }&#xa;    public static void totaldep()&#xa;    {&#xa;    for(int i = 0; i&lt;10;i++)&#xa;      {&#xa;          //en la variabel fltsumatoria se va a guardar lo que tiene la matriz en la posicion 9,convertido a un dato con decimal&#xa;      fltsumatoria = Float.parseFloat(plani[i][9]);&#xa;      if(plani[i][0].equals(&quot;1&quot;))&#xa;      {&#xa;         dep[0] = dep[0] + fltsumatoria;&#xa;      }&#xa;      if(plani[i][0].equals(&quot;2&quot;))&#xa;      {&#xa;          dep[1] = dep[1] + fltsumatoria;&#xa;      }&#xa;       if(plani[i][0].equals(&quot;3&quot;))&#xa;      {&#xa;         dep[2] = dep[2] + fltsumatoria;&#xa;      }&#xa;      if(plani[i][0].equals(&quot;4&quot;))&#xa;      {&#xa;        dep[3] = dep[3] + fltsumatoria;&#xa;      }&#xa;      if(plani[i][0].equals(&quot;5&quot;))&#xa;      {&#xa;          dep[4] = dep[4] + fltsumatoria;&#xa;      }&#xa;      }&#xa;     System.out.println(&quot;TOTAL DE GASTO POR DEPARTAMENTO: \u005cn&quot;);&#xa;       for(int i = 0;i&lt;=4;i++)&#xa;       {&#xa;           System.out.println(&quot;DEPATAMENTO &quot;+(i+1)+&quot;:    &quot;+dep[i]+&quot;\u005cn&quot;);&#xa;       }&#xa;    }&#xa;    public static void isremp()&#xa;    {&#xa;    for(int i = 0; i &lt;10; i++)&#xa;       {&#xa;           //en la variable intconversueldo se va a guardar lo que tiene la matriz en la posicion 3,convertido a un dato con entero&#xa;       intconversueldo = Integer.parseInt(plani[i][3]);&#xa;        if(intconversueldo &gt;= 2500 &amp;&amp; intconversueldo&lt;=5000)&#xa;        {&#xa;          ISR[i][0] = plani[i][2];&#xa;          ISR[i][1] = &quot;3%&quot;;&#xa;          ISR[i][2] = plani[i][8];&#xa;        }&#xa;        else if(intconversueldo &gt;5000 &amp;&amp; intconversueldo &lt;=10000)&#xa;        {&#xa;          ISR[i][0] = plani[i][2];&#xa;          ISR[i][1] = &quot;5%&quot;;&#xa;          ISR[i][2] = plani[i][8];&#xa;        }&#xa;        else if(intconversueldo &gt;=  10001 &amp;&amp; intconversueldo &lt;= 100000)&#xa;        {&#xa;            ISR[i][0] = plani[i][2];&#xa;            ISR[i][1] = &quot;10%&quot;;&#xa;            ISR[i][2] = plani[i][8];&#xa;        } &#xa;       }&#xa;    System.out.println(&quot;PORCENTAJE DE ISR POR EMPLEADO: \u005cn&quot;);&#xa;       for(int i = 0;i&lt;10;i++)&#xa;       {&#xa;           System.out.println(&quot;EMPLEADO &quot;+(i+1)+&quot;:&quot;+ISR[i][0]+&quot;           \u005ct\u005ct\u005ctPAGA:&quot;+ISR[i][1]+&quot;     \u005ct\u005ct\u005ct\u005ctEL ISR ES:&quot;+ISR[i][2]);&#xa;       }&#xa;    }&#xa;    public static void menuregresar()&#xa;    {&#xa;        //menu para ciclo do-while&#xa;       System.out.println(&quot;\u005cn&#xbf;DESEA VOLVER A INGRESAR LOS NOMBRES?\u005cn1.si\u005cn2.no&quot;);&#xa;       opcion = lector.nextInt();&#xa;    }&#xa;    &#xa;}&#xa;" containsInvalidXMLChars="true"/>
          </Properties>
        </Component>
      </SubComponents>
    </Container>
    <Component class="javax.swing.JButton" name="jButton2">
      <Properties>
        <Property name="text" type="java.lang.String" value="REGRESAR"/>
      </Properties>
      <Events>
        <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="jButton2ActionPerformed"/>
      </Events>
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout" value="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout$AbsoluteConstraintsDescription">
          <AbsoluteConstraints x="51" y="29" width="380" height="-1"/>
        </Constraint>
      </Constraints>
    </Component>
  </SubComponents>
</Form>
