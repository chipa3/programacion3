<?xml version="1.0" encoding="UTF-8" ?>

<Form version="1.8" maxVersion="1.9" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
  <Properties>
    <Property name="defaultCloseOperation" type="int" value="3"/>
  </Properties>
  <SyntheticProperties>
    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
    <SyntheticProperty name="generateCenter" type="boolean" value="false"/>
  </SyntheticProperties>
  <AuxValues>
    <AuxValue name="FormSettings_autoResourcing" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_autoSetComponentName" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_generateFQN" type="java.lang.Boolean" value="true"/>
    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_i18nAutoMode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_layoutCodeTarget" type="java.lang.Integer" value="1"/>
    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
    <AuxValue name="designerSize" type="java.awt.Dimension" value="-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,3,9,0,0,4,123"/>
  </AuxValues>

  <Layout class="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout">
    <Property name="useNullLayout" type="boolean" value="false"/>
  </Layout>
  <SubComponents>
    <Container class="javax.swing.JScrollPane" name="jScrollPane1">
      <AuxValues>
        <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
      </AuxValues>
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout" value="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout$AbsoluteConstraintsDescription">
          <AbsoluteConstraints x="47" y="92" width="468" height="328"/>
        </Constraint>
      </Constraints>

      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
      <SubComponents>
        <Component class="javax.swing.JTextArea" name="jTextArea1">
          <Properties>
            <Property name="editable" type="boolean" value="false"/>
            <Property name="columns" type="int" value="20"/>
            <Property name="rows" type="int" value="5"/>
            <Property name="text" type="java.lang.String" value="/*&#xa; * To change this license header, choose License Headers in Project Properties.&#xa; * To change this template file, choose Tools | Templates&#xa; * and open the template in the editor.&#xa; */&#xa;package arbolBB;&#xa;&#xa;import java.util.ArrayList;&#xa;import java.util.LinkedList;&#xa;import javax.swing.JPanel;&#xa;&#xa;/**&#xa; *&#xa; * @author .&#xa; */&#xa;&#xa;public class ArbolBB {&#xa;&#xa;    private Nodo raiz;&#xa;    int num_nodos;&#xa;    int alt;&#xa;&#xa;    public ArbolBB() {&#xa;        raiz = null;&#xa;    }&#xa;    &#xa;    public boolean agregar(int dato) {&#xa;        Nodo nuevo = new Nodo(dato, null, null);&#xa;        insertar(nuevo, raiz);&#xa;        return true;&#xa;    }&#xa;    &#xa;    //Metodo para insertar un dato en el arbol...no acepta repetidos :)&#xa;    public void insertar(Nodo nuevo, Nodo pivote) {&#xa;        if (this.raiz == null) {&#xa;            raiz = nuevo;&#xa;        } else {&#xa;            if (nuevo.getDato() &lt;= pivote.getDato()) {&#xa;                if (pivote.getIzq() == null) {&#xa;                    pivote.setIzq(nuevo);&#xa;                } else {&#xa;                    insertar(nuevo, pivote.getIzq());&#xa;                }&#xa;            } else {&#xa;                if (pivote.getDer() == null) {&#xa;                    pivote.setDer(nuevo);&#xa;                } else {&#xa;                    insertar(nuevo, pivote.getDer());&#xa;                }&#xa;            }&#xa;        }&#xa;&#xa;    }&#xa;&#xa;    public Nodo getRaiz() {&#xa;        return raiz;&#xa;    }&#xa;&#xa;    public void setRaiz(Nodo raiz) {&#xa;        this.raiz = raiz;&#xa;    }&#xa;&#xa;    //Recorrido preorden, recibe el nodo a empezar (raiz) y una linkedlist para ir guardando el recorrido&#xa;    public LinkedList preOrden() {&#xa;        LinkedList rec = new LinkedList();&#xa;        preorden(raiz, rec);&#xa;        return rec;&#xa;    }&#xa;    &#xa;    public void preorden(Nodo aux, LinkedList recorrido) {&#xa;        if (aux != null) {&#xa;            recorrido.add(aux.getDato());&#xa;            preorden(aux.getIzq(), recorrido);&#xa;            preorden(aux.getDer(), recorrido);&#xa;        }&#xa;    }&#xa;&#xa;    //Recorrido inorden, recibe el nodo a empezar (raiz) y una linkedlist para ir guardando el recorrido&#xa;    public LinkedList inOrden() {&#xa;        LinkedList rec = new LinkedList();&#xa;        inorden(raiz, rec);&#xa;        return rec;&#xa;    }&#xa;    &#xa;    public void inorden(Nodo aux, LinkedList recorrido) {&#xa;        if (aux != null) {&#xa;            inorden(aux.getIzq(), recorrido);&#xa;            recorrido.add(aux.getDato());&#xa;            inorden(aux.getDer(), recorrido);&#xa;        }&#xa;    }&#xa;&#xa;    //Recorrido postorden, recibe el nodo a empezar (raiz) y una linkedlist para ir guardando el recorrido&#xa;    public LinkedList postOrden() {&#xa;        LinkedList rec = new LinkedList();&#xa;        postorden(raiz, rec);&#xa;        return rec;&#xa;    }&#xa;    public void postorden(Nodo aux, LinkedList recorrido) {&#xa;        if (aux != null) {&#xa;            postorden(aux.getIzq(), recorrido);&#xa;            postorden(aux.getDer(), recorrido);&#xa;            recorrido.add(aux.getDato());&#xa;        }&#xa;    }&#xa;&#xa;    //Metodo para verificar si hay un nodo en el arbol&#xa;    public boolean existe(int dato) {&#xa;        Nodo aux = raiz;&#xa;        while (aux != null) {&#xa;            if (dato == aux.getDato()) {&#xa;                return true;&#xa;            } else if (dato &gt; aux.getDato()) {&#xa;                aux = aux.getDer();&#xa;            } else {&#xa;                aux = aux.getIzq();&#xa;            }&#xa;        }&#xa;        return false;&#xa;    }&#xa;&#xa;    private void altura(Nodo aux, int nivel) {&#xa;        if (aux != null) {&#xa;            altura(aux.getIzq(), nivel + 1);&#xa;            alt = nivel;&#xa;            altura(aux.getDer(), nivel + 1);&#xa;        }&#xa;    }&#xa;&#xa;    //Devuleve la altura del arbol&#xa;    public int getAltura() {&#xa;        altura(raiz, 1);&#xa;        return alt;&#xa;    }&#xa;    &#xa;     public JPanel getdibujo() {&#xa;        return new ArbolExpresionGrafico(this);&#xa;    }&#xa;}&#xa;"/>
          </Properties>
        </Component>
      </SubComponents>
    </Container>
    <Container class="javax.swing.JScrollPane" name="jScrollPane2">
      <AuxValues>
        <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
      </AuxValues>
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout" value="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout$AbsoluteConstraintsDescription">
          <AbsoluteConstraints x="571" y="92" width="538" height="328"/>
        </Constraint>
      </Constraints>

      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
      <SubComponents>
        <Component class="javax.swing.JTextArea" name="jTextArea2">
          <Properties>
            <Property name="editable" type="boolean" value="false"/>
            <Property name="columns" type="int" value="20"/>
            <Property name="rows" type="int" value="5"/>
            <Property name="text" type="java.lang.String" value="&#xa;package arbolBB;&#xa;&#xa;  /**&#xa; *&#xa; * @author&#xa; */&#xa;&#xa;import java.awt.*;&#xa;import java.util.*;&#xa;import javax.swing.*;&#xa;&#xa;&#xa;public class ArbolExpresionGrafico extends JPanel &#xa;{&#xa;    private ArbolBB miArbol;&#xa;    private HashMap posicionNodos = null;&#xa;    private HashMap subtreeSizes = null;&#xa;    private boolean dirty = true;&#xa;    private int parent2child = 20, child2child = 30;&#xa;    private Dimension empty = new Dimension(0,0);&#xa;    private FontMetrics fm = null;&#xa;    &#xa;    &#xa;    /**&#xa;     * Constructor de la clase ArbolExpresionGrafico.&#xa;     * El constructor permite inicializar los atributos de la clase ArbolExpresionGrafico&#xa;     * y llama al m&#xe9;todo repaint(), que es el encargado de pintar el Arbol.&#xa;     * @param miExpresion: dato de tipo ArbolExpresion que contiene el Arbol a&#xa;     * dibujar.&#xa;     */&#xa;    public ArbolExpresionGrafico(ArbolBB miArbol) &#xa;    {&#xa;          this.miArbol = miArbol;&#xa;          this.setBackground(Color.WHITE);&#xa;          posicionNodos = new HashMap();&#xa;          subtreeSizes = new HashMap();&#xa;          dirty = true;&#xa;          repaint();      &#xa;    }&#xa;&#xa;&#xa;    /**&#xa;     * Calcula las posiciones de los respectivos sub&#xe1;rboles y de cada nodo que &#xa;     * forma parte de ese sub&#xe1;rbol, para conocer en que posici&#xf3;n van a ir dibujados&#xa;     * los rect&#xe1;ngulos representativos del &#xe1;rbol de la expresi&#xf3;n.&#xa;     */&#xa;    private void calcularPosiciones() &#xa;    {&#xa;         posicionNodos.clear();&#xa;         subtreeSizes.clear();&#xa;         Nodo root = this.miArbol.getRaiz();&#xa;         if (root != null) &#xa;         {&#xa;             calcularTama&#xf1;oSubarbol(root);&#xa;             calcularPosicion(root, Integer.MAX_VALUE, Integer.MAX_VALUE, 0);&#xa;         }&#xa;    }&#xa;    &#xa;    /**&#xa;     * Calcula el tama&#xf1;o de cada sub&#xe1;rbol y lo agrega al objeto subtreeSizes de la clase&#xa;     * de tipo HashMap que va a contener la coleccion de todos los &#xa;     * sub&#xe1;rboles que contiene un arbol.&#xa;     * @param n:Objeto de la clase NodoB &lt;T&gt; que se utiliza como&#xa;     * referencia calcular el tama&#xf1;o de cada sub&#xe1;rbol.&#xa;     * @return Dimension con el tama&#xf1;o de cada sub&#xe1;rbol.&#xa;     */&#xa;    private Dimension calcularTama&#xf1;oSubarbol(Nodo n) &#xa;    {&#xa;          if (n == null) &#xa;              return new Dimension(0,0);&#xa; &#xa;          Dimension ld = calcularTama&#xf1;oSubarbol(n.getIzq());&#xa;          Dimension rd = calcularTama&#xf1;oSubarbol(n.getDer());&#xa;          &#xa;          int h = fm.getHeight() + parent2child + Math.max(ld.height, rd.height);&#xa;          int w = ld.width + child2child + rd.width;&#xa;          &#xa;          Dimension d = new Dimension(w, h);&#xa;          subtreeSizes.put(n, d);&#xa;          &#xa;          return d;&#xa;    }&#xa;    &#xa;    &#xa;    /**&#xa;     * Calcula la ubicaci&#xf3;n de cada nodo de cada sub&#xe1;rbol y agrega cada nodo con &#xa;     * un objeto de tipo Rectangule que tiene la ubicaci&#xf3;n y la informaci&#xf3;n espec&#xed;fica de d&#xf3;nde &#xa;     * va a ser dibujado.&#xa;     * @param n: Objeto de tipo NodoB &lt;T&gt; que se utiliza como&#xa;     * referencia para calcular la ubicaci&#xf3;n de cada nodo.&#xa;     * @param left: int con alineaci&#xf3;n y orientaci&#xf3;n a la izquierda.&#xa;     * @param right: int con alineaci&#xf3;n y orientaci&#xf3;n a la derecha.&#xa;     * @param top: int con el tope.&#xa;     */&#xa;    private void calcularPosicion(Nodo n, int left, int right, int top) &#xa;    {&#xa;      if (n == null) &#xa;          return;&#xa;      &#xa;      Dimension ld = (Dimension) subtreeSizes.get(n.getIzq());&#xa;      if (ld == null) &#xa;          ld = empty;&#xa;      &#xa;      Dimension rd = (Dimension) subtreeSizes.get(n.getDer());&#xa;      if (rd == null) &#xa;          rd = empty;&#xa;      &#xa;      int center = 0;&#xa;      &#xa;      if (right != Integer.MAX_VALUE)&#xa;          center = right - rd.width - child2child/2;&#xa;      else if (left != Integer.MAX_VALUE)&#xa;          center = left + ld.width + child2child/2;&#xa;      int width = fm.stringWidth(n.getDato()+&quot;&quot;);&#xa; &#xa;      posicionNodos.put(n,new Rectangle(center - width/2 - 3, top, width + 6, fm.getHeight()));&#xa;      &#xa;      calcularPosicion(n.getIzq(), Integer.MAX_VALUE, center - child2child/2, top + fm.getHeight() + parent2child);&#xa;      calcularPosicion(n.getDer(), center + child2child/2, Integer.MAX_VALUE, top + fm.getHeight() + parent2child);&#xa;    }&#xa;    &#xa;    /**&#xa;     * Dibuja el &#xe1;rbol teniendo en cuenta las ubicaciones de los nodos y los &#xa;     * sub&#xe1;rboles calculadas anteriormente.&#xa;     * @param g: Objeto de la clase Graphics2D que permite realizar el dibujo de las l&#xed;neas, rectangulos y del String de la informaci&#xf3;n que contiene el Nodo.&#xa;     * @param n: Objeto de la clase NodoB &lt;T&gt; que se utiliza como referencia para dibujar el &#xe1;rbol.&#xa;     * @param puntox: int con la posici&#xf3;n en x desde donde se va a dibujar la l&#xed;nea hasta el siguiente hijo.&#xa;     * @param puntoy: int con la posici&#xf3;n en y desde donde se va a dibujar la l&#xed;nea hasta el siguiente hijo.&#xa;     * @param yoffs: int con la altura del FontMetrics.&#xa;     */&#xa;    private void dibujarArbol(Graphics2D g, Nodo n, int puntox, int puntoy, int yoffs) &#xa;    {&#xa;     if (n == null) &#xa;         return;&#xa;     &#xa;     Rectangle r = (Rectangle) posicionNodos.get(n);&#xa;     g.draw(r);&#xa;     g.drawString(n.getDato()+&quot;&quot;, r.x + 3, r.y + yoffs);&#xa;   &#xa;     if (puntox != Integer.MAX_VALUE)&#xa;       &#xa;     g.drawLine(puntox, puntoy, (int)(r.x + r.width/2), r.y);&#xa;     &#xa;     dibujarArbol(g, n.getIzq(), (int)(r.x + r.width/2), r.y + r.height, yoffs);&#xa;     dibujarArbol(g, n.getDer(), (int)(r.x + r.width/2), r.y + r.height, yoffs);&#xa;     &#xa;   }&#xa;    &#xa;&#xa;   /**&#xa;     * Sobreescribe el metodo paint y se encarga de pintar todo el &#xe1;rbol.&#xa;     * @param g: Objeto de la clase Graphics.&#xa;     */&#xa;    @Override&#xa;   public void paint(Graphics g) &#xa;   {&#xa;         super.paint(g);&#xa;         fm = g.getFontMetrics();&#xa;&#xa;         if (dirty) &#xa;         {&#xa;           calcularPosiciones();&#xa;           dirty = false;&#xa;         }&#xa;         &#xa;         Graphics2D g2d = (Graphics2D) g;&#xa;         g2d.translate(getWidth() / 2, parent2child);&#xa;         dibujarArbol(g2d, this.miArbol.getRaiz(), Integer.MAX_VALUE, Integer.MAX_VALUE, &#xa;                  fm.getLeading() + fm.getAscent());&#xa;         fm = null;&#xa;   }&#xa;   &#xa; }&#xa;"/>
          </Properties>
        </Component>
      </SubComponents>
    </Container>
    <Container class="javax.swing.JScrollPane" name="jScrollPane3">
      <AuxValues>
        <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
      </AuxValues>
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout" value="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout$AbsoluteConstraintsDescription">
          <AbsoluteConstraints x="47" y="446" width="468" height="325"/>
        </Constraint>
      </Constraints>

      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
      <SubComponents>
        <Component class="javax.swing.JTextArea" name="jTextArea3">
          <Properties>
            <Property name="editable" type="boolean" value="false"/>
            <Property name="columns" type="int" value="20"/>
            <Property name="rows" type="int" value="5"/>
            <Property name="text" type="java.lang.String" value="/*&#xa; * To change this license header, choose License Headers in Project Properties.&#xa; * To change this template file, choose Tools | Templates&#xa; * and open the template in the editor.&#xa; */&#xa;package arbolBB;&#xa;&#xa;/**&#xa; *&#xa; * @author&#xa; */&#xa;public class Nodo {&#xa;    private int dato;&#xa;    private Nodo izq,der;&#xa;&#xa;    public Nodo(int dato, Nodo izq, Nodo der) {&#xa;        this.dato = dato;&#xa;        this.izq = izq;&#xa;        this.der = der;&#xa;    }&#xa;&#xa;    public int getDato() {&#xa;        return dato;&#xa;    }&#xa;&#xa;    public void setDato(int dato) {&#xa;        this.dato = dato;&#xa;    }&#xa;&#xa;    public Nodo getIzq() {&#xa;        return izq;&#xa;    }&#xa;&#xa;    public void setIzq(Nodo izq) {&#xa;        this.izq = izq;&#xa;    }&#xa;&#xa;    public Nodo getDer() {&#xa;        return der;&#xa;    }&#xa;&#xa;    public void setDer(Nodo der) {&#xa;        this.der = der;&#xa;    }&#xa; &#xa;}&#xa;"/>
          </Properties>
        </Component>
      </SubComponents>
    </Container>
    <Component class="javax.swing.JButton" name="jButton1">
      <Properties>
        <Property name="text" type="java.lang.String" value="REGRESAR"/>
      </Properties>
      <Events>
        <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="jButton1ActionPerformed"/>
      </Events>
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout" value="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout$AbsoluteConstraintsDescription">
          <AbsoluteConstraints x="47" y="25" width="460" height="-1"/>
        </Constraint>
      </Constraints>
    </Component>
    <Container class="javax.swing.JScrollPane" name="jScrollPane4">
      <AuxValues>
        <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
      </AuxValues>
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout" value="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout$AbsoluteConstraintsDescription">
          <AbsoluteConstraints x="570" y="450" width="540" height="320"/>
        </Constraint>
      </Constraints>

      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
      <SubComponents>
        <Component class="javax.swing.JTextArea" name="jTextArea4">
          <Properties>
            <Property name="editable" type="boolean" value="false"/>
            <Property name="columns" type="int" value="20"/>
            <Property name="rows" type="int" value="5"/>
            <Property name="text" type="java.lang.String" value="package arbolBB;&#xa;&#xa;import java.util.ArrayList;&#xa;import java.util.LinkedList;&#xa;import javax.swing.JPanel;&#xa;&#xa;/**&#xa; *&#xa; * @author&#xa; */&#xa;public class SimuladorArbolBinario {&#xa;&#xa;    ArbolBB miArbol = new ArbolBB();&#xa;&#xa;    public SimuladorArbolBinario() {&#xa;    }&#xa;&#xa;    public boolean insertar(Integer dato) {&#xa;        return (this.miArbol.agregar(dato));&#xa;    }&#xa;    //metodo para mostrar los recorridos del arbol&#xa;    public String preOrden() {&#xa;        LinkedList it = this.miArbol.preOrden();&#xa;        return (recorrido(it, &quot;Recorrido PreOrden&quot;));&#xa;    }&#xa;&#xa;    public String inOrden() {&#xa;        LinkedList it = this.miArbol.inOrden();&#xa;        return (recorrido(it, &quot;Recorrido InOrden&quot;));&#xa;    }&#xa;&#xa;    public String postOrden() {&#xa;        LinkedList it = this.miArbol.postOrden();&#xa;        return (recorrido(it, &quot;Recorrido PosOrden&quot;));&#xa;    }&#xa;    &#xa;    //metodo para poder mostrar los tipos d recorrido&#xa;    private String recorrido(LinkedList it, String msg) {&#xa;        int i = 0;&#xa;        String r = msg + &quot;\u005cn&quot;;&#xa;        while (i &lt; it.size()) {&#xa;            r += &quot;\u005ct&quot; + it.get(i).toString() + &quot;&quot;;&#xa;            i++;&#xa;        }&#xa;        return (r);&#xa;    }&#xa;    &#xa;    &#xa;    //Metodo para buscar dato en el nodo&#xa;    public String buscar(Integer dato) {&#xa;        boolean siEsta = this.miArbol.existe(dato);&#xa;        String r = &quot;El dato:&quot; + dato.toString() + &quot;\u005cn&quot;;&#xa;        r += siEsta ? &quot;Si se encuentra en el arbol&quot; : &quot;No se encuentra en el arbol&quot;;&#xa;        return (r);&#xa;    }&#xa;&#xa;    public JPanel getDibujo() {&#xa;        return this.miArbol.getdibujo();&#xa;    }&#xa;}&#xa;" containsInvalidXMLChars="true"/>
          </Properties>
        </Component>
      </SubComponents>
    </Container>
  </SubComponents>
</Form>
